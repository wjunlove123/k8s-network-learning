---------------------------------------------------------------------------------------------------------------
Flannel ipsec ENV:
$ kubectl get node -owide | grep -E "bpf1|bpf3"
bpf1   Ready    control-plane,master   3d20h   v1.23.4   192.168.2.71   <none>        Ubuntu 20.04.5 LTS   5.15.0-52-generic   docker://20.10.21
bpf3   Ready    <none>                 3d20h   v1.23.4   192.168.2.73   <none>        Ubuntu 20.04.5 LTS   5.15.0-52-generic   docker://20.10.21

$ k get pods -owide | grep -E "bpf1|bpf3"
flannel-ipsec-c9bqx   1/1     Running   1 (130m ago)   150m   10.244.2.15   bpf3   <none>           <none>
flannel-ipsec-zcjhr   1/1     Running   1 (133m ago)   150m   10.244.0.15   bpf1   <none>           <none> 

$ k exec -it flannel-ipsec-zcjhr -- ping -c 1 10.244.2.15

---------------------------------------------------------------------------------------------------------------
Step1: Pod_$(BPF1) ---> BPF1_Node:
---------------------------------------------------------------------------------------------------------------
When do the ping at the pod flannel-ipsec-zcjhr, it will triger the routing quary logical:
$ kubectl exec -it flannel-ipsec-zcjhr -- route -n 
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.244.0.1      0.0.0.0         UG    0      0        0 eth0
10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 eth0
10.244.0.0      10.244.0.1      255.255.0.0     UG    0      0        0 eth0  // it will match this table.and the next-hop is the 10.244.0.1 which at the ROOT NS.
So we need get the MAC_$(10.244.0.1).It's a basical routing quary.
We can capture this with tcpdump!
bash-5.1# arp -n 
bash-5.1# // it's empty now.

If we do the ping to 10.244.2.13, (In order to get the MAC_$(10.244.0.1,it need arp protcol))we can see:
$ arp -n 
Address                  HWtype  HWaddress           Flags Mask            Iface
10.244.0.1               ether   f6:c8:0b:ba:1b:0b   C                     eth0
We can encap the packet and send to the ROOT NS. The next-step will use the ROOT NS's logical to deal the packet.


---------------------------------------------------------------------------------------------------------------
Step2: ROOT NS handle the packet: S_IP: 10.244.0.15 D_IP: 10.244.2.15
---------------------------------------------------------------------------------------------------------------
How the ROOT NS deal the packet? Routing/FDB/Netfilter? 
All the methods has been tried, but no luck here. We can not get the clue.
This is ipsec backend, we will move to the ipsec module. ip xfrm(transform) status and ip xfrm policy.
For IPSec ENV, we need make clear that :
1. how to encryption the data?
2. which data need to be encrypted?

About the Q1. we can use ip xfrm state add --help to add the encryption inputs.
About the Q2. we can use ip xfrm policy add --help to decide which data need to be encrypted.
// if we want to the details, we can use: man ip-xfrm

$ ip xfrm state   //  For 3 Nodes. we should generate 6 states.
src 192.168.2.71 dst 192.168.2.73
        proto esp spi 0xc085cd56 reqid 11 mode tunnel                           // spi 0xc085cd56 ||| reqid 11 associated with policy
        replay-window 0 flag af-unspec
        aead rfc4106(gcm(aes)) 0x59dfbc2e895f6e9648fb34856b31dbd2b7a8b703 128   // spi 0xc085cd56 ||| aead rfc4106(gcm(aes)) 0x59dfbc2e895f6e9648fb34856b31dbd2b7a8b703
        anti-replay context: seq 0x0, oseq 0x0, bitmap 0x00000000
src 192.168.2.73 dst 192.168.2.71
        proto esp spi 0xc6d776f2 reqid 11 mode tunnel
        replay-window 32 flag af-unspec
        aead rfc4106(gcm(aes)) 0x03278256dbede5843a458c11b5340893cfb0c8e4 128
        anti-replay context: seq 0x0, oseq 0x0, bitmap 0x00000000
src 192.168.2.71 dst 192.168.2.72
        proto esp spi 0xc58a09a3 reqid 11 mode tunnel
        replay-window 0 flag af-unspec
        aead rfc4106(gcm(aes)) 0x0e7105543f22e373e6847239181545b084087708 128
        anti-replay context: seq 0x0, oseq 0x0, bitmap 0x00000000
src 192.168.2.72 dst 192.168.2.71
        proto esp spi 0xcf34888a reqid 11 mode tunnel
        replay-window 32 flag af-unspec
        aead rfc4106(gcm(aes)) 0x8b59e15d276a2027100098c08121f8c10e89c92e 128
        anti-replay context: seq 0x0, oseq 0x0, bitmap 0x00000000
src 192.168.2.71 dst 192.168.2.73
        proto esp spi 0xc4017013 reqid 11 mode tunnel
        replay-window 0 flag af-unspec
        aead rfc4106(gcm(aes)) 0x18a5749b3cbb3666f010c3d94d824982e9c6c912 128
        anti-replay context: seq 0x0, oseq 0x0, bitmap 0x00000000
src 192.168.2.73 dst 192.168.2.71
        proto esp spi 0xcad44e57 reqid 11 mode tunnel
        replay-window 32 flag af-unspec
        aead rfc4106(gcm(aes)) 0x625fb3ae757d79b754dbd0a3d90bd1e84a9ac17b 128
        anti-replay context: seq 0x0, oseq 0x0, bitmap 0x00000000


$ ip xfrm policy //  this object with 3 derection: 1.in 2.out 3.fwd   // Below is shown at BPF1(192.168.2.71)
src 10.244.2.0/24 dst 10.244.0.0/24 
        dir fwd priority 0 
        tmpl src 192.168.2.73 dst 192.168.2.71
                proto esp reqid 11 mode tunnel
src 10.244.2.0/24 dst 10.244.0.0/24 
        dir in priority 0 
        tmpl src 192.168.2.73 dst 192.168.2.71
                proto esp reqid 11 mode tunnel
src 10.244.0.0/24 dst 10.244.2.0/24 
        dir out priority 0 
        tmpl src 192.168.2.71 dst 192.168.2.73
                proto esp reqid 11 mode tunnel
src 10.244.1.0/24 dst 10.244.0.0/24 
        dir fwd priority 0 
        tmpl src 192.168.2.72 dst 192.168.2.71
                proto esp reqid 11 mode tunnel
src 10.244.1.0/24 dst 10.244.0.0/24 
        dir in priority 0 
        tmpl src 192.168.2.72 dst 192.168.2.71
                proto esp reqid 11 mode tunnel
src 10.244.0.0/24 dst 10.244.1.0/24 
        dir out priority 0 
        tmpl src 192.168.2.71 dst 192.168.2.72
                proto esp reqid 11 mode tunnel

This policy show that how to encap the packet. 

!#!# As so far: We get the how to encryption(some encryption items) and wich data need to be encaped(which contain the tunnel two-sides info!!!)
If there are packets want to send out, we can use the above logical to send out. <<<Actually, we just want to the dst_pod in which node.>>>
we can capture the packet at the ens160:
About the Flannel, that used the ipsec tunnel mode.
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
Frame 6: 130 bytes on wire (1040 bits), 130 bytes captured (1040 bits)
Ethernet II, Src: VMware_67:92:63 (00:0c:29:67:92:63), Dst: VMware_dd:24:3a (00:0c:29:dd:24:3a)//Outer_SRC_AMC and Outer_Dst_MAC
Internet Protocol Version 4, Src: 192.168.2.71, Dst: 192.168.2.73                              //Outer_SRC_IP and Outer_Dst_IP(which get from the ip xfrm policy table)  Encapsulating Security Payload                                                                 //ESP Header
Internet Protocol Version 4, Src: 10.244.0.15, Dst: 10.244.2.15                                //Inner_Src_IP and Inner_Dst_IP
Transmission Control Protocol, Src Port: 57984, Dst Port: 80, Seq: 0, Len: 0                   //Transport Layer details
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


From now no, we get the logical about the IPsec tunnel mode. can we ready a demo? Of Course!
Let's do it:

-----------------            -----------------
|      ns1      |            |      ns1      |
|   1.1.1.2/24  |            |   1.1.2.2/24  |
|       |       |            |       |       |
|       |       |            |       |       |
|       |       |            |       |       |
|-------|-------|            |-------|-------|      
      ens160                      ens160
        |----------------------------|
192.168.2.71     ipsec tunnel     192.168.2.73

$ BPF1:
ip netns a ns1
ip l a veth type veth peer name c-eth0 
ip l s veth up
ip a a 1.1.1.1/24 dev veth

ip l s c-eth0 netns ns1
ip netns exec ns1 ip l s c-eth0 up
ip netns exec ns1 ip a a 1.1.1.2/24 dev c-eth0
ip netns exec ns1 ip l s lo up
ip netns exec ns1 ip r a default via 1.1.1.1 dev c-eth0

# ip route add  1.1.2.0/24 via 192.168.2.73 dev ens160[no need]

$ BPF3
ip netns a ns1
ip l a veth type veth peer name c-eth0
ip l s veth up
ip a a 1.1.2.1/24 dev veth

ip l s c-eth0 netns ns1
ip netns exec ns1 ip l s c-eth0 up
ip netns exec ns1 ip a a 1.1.2.2/24 dev c-eth0
ip netns exec ns1 ip l s lo up
ip netns exec ns1 ip r a default via 1.1.2.1 dev c-eth0

# ip route add  1.1.1.0/24 via 192.168.2.71 dev ens160[no need]



$ create the ip xfrm state and ip xfrm policy:
# ID=0x`dd if=/dev/urandom count=4 bs=1 2> /dev/null| xxd -p -c 8
# KEY=0x`dd if=/dev/urandom count=20 bs=1 2> /dev/null| xxd -p -c 40`
ID=0xfe51d978
KEY=0xfa42aa6bc685beb4d967057134dd8e327ca179a6

$ BPF1
ID=0xfe51d978
KEY=0xfa42aa6bc685beb4d967057134dd8e327ca179a6
ip xfrm state add src 192.168.2.71 dst 192.168.2.73 proto esp spi $ID reqid $ID mode tunnel aead 'rfc4106(gcm(aes))' $KEY 128
ip xfrm state add src 192.168.2.73 dst 192.168.2.71 proto esp spi $ID reqid $ID mode tunnel aead 'rfc4106(gcm(aes))' $KEY 128

ip xfrm policy add src 1.1.1.2/24 dst 1.1.2.2/24 dir out tmpl src 192.168.2.71 dst 192.168.2.73 proto esp reqid $ID mode tunnel
ip xfrm policy add src 1.1.2.2/24 dst 1.1.1.2/24 dir fwd tmpl src 192.168.2.73 dst 192.168.2.71 proto esp reqid $ID mode tunnel
ip xfrm policy add src 1.1.2.2/24 dst 1.1.1.2/24 dir in  tmpl src 192.168.2.73 dst 192.168.2.71 proto esp reqid $ID mode tunnel

$ BPF3
ID=0xfe51d978
KEY=0xfa42aa6bc685beb4d967057134dd8e327ca179a6
ip xfrm state add src 192.168.2.73 dst 192.168.2.71 proto esp spi $ID reqid $ID mode tunnel aead 'rfc4106(gcm(aes))' $KEY 128
ip xfrm state add src 192.168.2.71 dst 192.168.2.73 proto esp spi $ID reqid $ID mode tunnel aead 'rfc4106(gcm(aes))' $KEY 128

ip xfrm policy add src 1.1.2.2/24 dst 1.1.1.2/24 dir out tmpl src 192.168.2.73 dst 192.168.2.71 proto esp reqid $ID mode tunnel
ip xfrm policy add src 1.1.1.2/24 dst 1.1.2.2/24 dir fwd tmpl src 192.168.2.71 dst 192.168.2.73 proto esp reqid $ID mode tunnel
ip xfrm policy add src 1.1.1.2/24 dst 1.1.2.2/24 dir in  tmpl src 192.168.2.71 dst 192.168.2.73 proto esp reqid $ID mode tunnel

