---------------------------------------------------------------------------------------------------------------
Flannel wireguard ENV:
kubectl get node -owide | grep -E "bpf1|bpf3"
bpf1   Ready    control-plane,master   8d    v1.23.4   192.168.2.71   <none>        Ubuntu 20.04.5 LTS   5.15.0-52-generic   docker://20.10.21
bpf3   Ready    <none>                 8d    v1.23.4   192.168.2.73   <none>        Ubuntu 20.04.5 LTS   5.15.0-52-generic   docker://20.10.21

k get pods -owide | grep -E "bpf1|bpf3"
flannel-wireguard-4j89p   1/1     Running   0          2d    10.244.0.16   bpf1   <none>           <none>
flannel-wireguard-p8qjf   1/1     Running   0          2d    10.244.2.18   bpf3   <none>           <none>

$ k exec -it flannel-wireguard-4j89p -- ping -c 1 10.244.2.18

---------------------------------------------------------------------------------------------------------------
Step1: Pod_$(BPF1) ---> BPF1_Node:
---------------------------------------------------------------------------------------------------------------
When do the ping at the pod flannel-wireguard-4j89p, it will triger the routing quary logical:
$ k exec -it flannel-wireguard-4j89p -- bash 
bash-5.1# route -n 
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.244.0.1      0.0.0.0         UG    0      0        0 eth0
10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 eth0
10.244.0.0      10.244.0.1      255.255.0.0     UG    0      0        0 eth0 // match this table. need the net-hop's mac_address to encap.

---------------------------------------------------------------------------------------------------------------
Step2: ROOT NS will handle the packet. S_IP: 10.244.0.16 D_IP: 10.244.2.18
---------------------------------------------------------------------------------------------------------------
When the ROOT NS recv the packet, how to deal? Routing/FDB/Netfilter? Yes, we uaually use Routing quary logica.So:
$ route -n 
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.2.1     0.0.0.0         UG    100    0        0 ens160
10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0
10.244.0.0      0.0.0.0         255.255.0.0     U     0      0        0 flannel-wg // math this one.The Outgoing interfacec is flannel-wg which is a wireguard interface.
169.254.0.0     0.0.0.0         255.255.0.0     U     1000   0        0 ens160
172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0
192.168.2.0     0.0.0.0         255.255.255.0   U     100    0        0 ens160
$ FAQ: How to quary this flannel-wg's type?
ip -d link show flannel-wg
4: flannel-wg: <POINTOPOINT,NOARP,UP,LOWER_UP> mtu 1420 qdisc noqueue state UNKNOWN mode DEFAULT group default 
    link/none  promiscuity 0 minmtu 0 maxmtu 2147483552 
    wireguard addrgenmode none numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 // wireguard addrgenmode --- wireguard.

$ FAQ: How to quary the wireguard tunnel info?
kube-flannel-ds-wkqs6          1/1     Running   0              2d     192.168.2.71   bpf1   <none>           <none>
$ kk exec -ti kube-flannel-ds-wkqs6 -- bash 
Defaulted container "kube-flannel" out of: kube-flannel, install-cni-plugin (init), install-cni (init)
bash-5.1# hostname
bpf1
bash-5.1# wg show all
interface: flannel-wg
  public key: YZzme2rRNVcXRMfFHobhM2NL/U5ElFJtHIuoCoKwE1Q=
  private key: (hidden)
  listening port: 51820

peer: Ym4jTph5RzSLGtMXkkU23+QmQdxAtkVWwRIgGHs4IA4=        // peer info: 192.168.2.72
  endpoint: 192.168.2.72:51820
  allowed ips: 10.244.1.0/24
  latest handshake: 56 minutes, 21 seconds ago
  transfer: 220 B received, 308 B sent

peer: SvC7fdv9pzuSwH5jfJHCLQfIOekU5oULYTOvlPiRo2E=        // peer info: 192.168.2.73
  endpoint: 192.168.2.73:51820
  allowed ips: 10.244.2.0/24
  latest handshake: 2 hours, 41 minutes, 33 seconds ago
  transfer: 220 B received, 308 B sent
bash-5.1#  

$ FAQ: How to get more help to understand the "wg show"'s ouputs?
man wg
gedit ../4-reference/man_wg.txt
!!! BUT: We can understand the logical directly with the outputs for `wg show`
//
CONFIGURATION FILE FORMAT
       The configuration file format is based on INI. There are two top level sections -- Interface and Peer. Multiple Peer sections may be specified, but only  one
       Interface section may be specified.

       The Interface section may contain the following fields:

       •      PrivateKey — a base64 private key generated by wg genkey. Required.

       •      ListenPort — a 16-bit port for listening. Optional; if not specified, chosen randomly.

       •      FwMark  — a 32-bit fwmark for outgoing packets. If set to 0 or "off", this option is disabled. May be specified in hexadecimal by prepending "0x". Op‐
              tional.

       The Peer sections may contain the following fields:

       •      PublicKey — a base64 public key calculated by wg pubkey from a private key, and usually transmitted out of band to the  author  of  the  configuration
              file. Required.

       •      PresharedKey  —  a  base64  preshared  key generated by wg genpsk. Optional, and may be omitted. This option adds an additional layer of symmetric-key
              cryptography to be mixed into the already existing public-key cryptography, for post-quantum resistance.

       •      AllowedIPs — a comma-separated list of IP (v4 or v6) addresses with CIDR masks from which incoming traffic for this peer is allowed and to which  out‐
              going  traffic  for  this  peer  is  directed. The catch-all 0.0.0.0/0 may be specified for matching all IPv4 addresses, and ::/0 may be specified for
              matching all IPv6 addresses. May be specified multiple times.

       •      Endpoint — an endpoint IP or hostname, followed by a colon, and then a port number. This endpoint will be updated automatically  to  the  most  recent
              source IP address and port of correctly authenticated packets from the peer.  Optional.

       •      PersistentKeepalive  —  a seconds interval, between 1 and 65535 inclusive, of how often to send an authenticated empty packet to the peer for the pur‐
              pose of keeping a stateful firewall or NAT mapping valid persistently. For example, if the interface very rarely sends traffic, but it might  at  any‐
              time  receive traffic from a peer, and it is behind NAT, the interface might benefit from having a persistent keepalive interval of 25 seconds. If set
              to 0 or "off", this option is disabled. By default or when unspecified, this option is off. Most users will not need this. Optional.
//

With the allowed ips: We can see: 

       •      AllowedIPs — a comma-separated list of IP (v4 or v6) addresses with CIDR masks from which incoming traffic for this peer is allowed and to which  out‐
              going  traffic  for  this  peer  is  directed. The catch-all 0.0.0.0/0 may be specified for matching all IPv4 addresses, and ::/0 may be specified for
              matching all IPv6 addresses. May be specified multiple times. // From this part: we can see that the traffice should be encap.

Okay, back to the ROOT NS Routing Table:
$ route -n 
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.2.1     0.0.0.0         UG    100    0        0 ens160
10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0
10.244.0.0      0.0.0.0         255.255.0.0     U     0      0        0 flannel-wg // will encap with wireguard protocol
169.254.0.0     0.0.0.0         255.255.0.0     U     1000   0        0 ens160
172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0
192.168.2.0     0.0.0.0         255.255.255.0   U     100    0        0 ens160

So we can get the Packet Format:
eog ../4-reference/2-wireshark-wg.png
There is similar with IPIP Or IPSec, it's not with the L2 header at the Inner Packet.

-----------------------------------------------------------------------------------------------------------------------










