---------------------------------------------------------------------------------------------------------------
Flannel VxLAN ENV:
$ kubectl get node -owide | grep -E "bpf1|bpf3"
bpf1   Ready    control-plane,master   3d20h   v1.23.4   192.168.2.71   <none>        Ubuntu 20.04.5 LTS   5.15.0-52-generic   docker://20.10.21
bpf3   Ready    <none>                 3d20h   v1.23.4   192.168.2.73   <none>        Ubuntu 20.04.5 LTS   5.15.0-52-generic   docker://20.10.21

$ kubectl get pods -owide | grep -E "bpf1|bpf3"
flannel-vxlan-6hxfm   1/1     Running   0          22h   10.244.2.10   bpf3   <none>           <none>
flannel-vxlan-ckftt   1/1     Running   0          22h   10.244.0.9    bpf1   <none>           <none>

$ k exec -it flannel-vxlan-ckftt  -- ping -c 1 10.244.2.10

---------------------------------------------------------------------------------------------------------------
Step1: Pod_$(BPF1) ---> BPF1_Node:
---------------------------------------------------------------------------------------------------------------
When do the ping at the pod flannel-vxlan-ckftt, it will triger the routing quary logical:
$ kubectl exec -it flannel-vxlan-ckftt -- route -n 
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.244.0.1      0.0.0.0         UG    0      0        0 eth0
10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 eth0
10.244.0.0      10.244.0.1      255.255.0.0     UG    0      0        0 eth0  // it will match this table.and the next-hop is the 10.244.0.1 which at the ROOT NS.
So we need get the MAC_$(10.244.0.1).It's a basical routing quary.
We can capture this with tcpdump!
bash-5.1# arp -n 
bash-5.1# // it's empty now.

If we do the ping to 10.244.2.10, (In order to get the MAC_$(10.244.0.1,it need arp protcol))we can see:
$ arp -n 
Address                  HWtype  HWaddress           Flags Mask            Iface
10.244.0.1               ether   f6:c8:0b:ba:1b:0b   C                     eth0
We can encap the packet and send to the ROOT NS. The next-step will use the ROOT NS's logical to deal the packet.


---------------------------------------------------------------------------------------------------------------
Step2: ROOT NS handle the packet: S_IP: 10.2440.0.9 D_IP: 10.244.2.10
---------------------------------------------------------------------------------------------------------------
How to deal the packet? routing or fdb or netfilter?
We can show the routing table:
$ route -n 
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.2.1     0.0.0.0         UG    100    0        0 ens160
10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0
10.244.1.0      10.244.1.0      255.255.255.0   UG    0      0        0 flannel.1
10.244.2.0      10.244.2.0      255.255.255.0   UG    0      0        0 flannel.1  // it will match this table. and the next-hop is 10.244.2.0/32.
169.254.0.0     0.0.0.0         255.255.0.0     U     1000   0        0 ens160
172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0
192.168.2.0     0.0.0.0         255.255.255.0   U     100    0        0 ens160

From the routing table:
In order to encap the pcaket, we need the Mac of 10.244.2.0/32. How to get this? /Yes, ARP table.
we can use arp -n or ip n s to show the arp table:
$ arp -n  | grep 10.244.2.0
10.244.2.0               ether   2e:23:03:33:2f:6d   CM                    flannel.1  // we can get the mac address of 10.244.2.0

So we can encap the packet now:
S_IP:  10.244.0.9                   D_IP:  10.244.2.10
S_MAC: $node_bpf1_flannel.1         D_MAC: $(10.244.2.0/32)

FAQ: So, can we send the packet to the outside directly? No!
Due to the flannel.1 is a v-interface,so it can not do this in a simple way.
->The flannel.1 also is a vxlan device. we can use $ ip -d link show to show the info:
|
|$ip -d link show flannel.1
|16: flannel.1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc noqueue state UNKNOWN mode DEFAULT group default 
|    link/ether f2:bb:d8:c8:db:bb brd ff:ff:ff:ff:ff:ff promiscuity 0 minmtu 68 maxmtu 65535 
|    vxlan id 1 local 192.168.2.71 dev ens160 srcport 0 0 dstport 8472 nolearning ttl auto ageing 300 udpcsum noudp6zerocsumtx noudp6zerocsumrx addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 
|root@bpf1:~# 
|So, it will come into the vxlan encap logical.
|For this part: i will provide a diagram for reference:
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
|Frame 23: 148 bytes on wire (1184 bits), 148 bytes captured (1184 bits)
|Ethernet II, Src: VMware_67:92:63 (00:0c:29:67:92:63), Dst: VMware_dd:24:3a (00:0c:29:dd:24:3a)       // Outer_S_MAC   and    Outer_D_MAC
|Internet Protocol Version 4, Src: 192.168.2.71, Dst: 192.168.2.73                                     // Outer_S_IP    and    Outer_D_MAC
|User Datagram Protocol, Src Port: 56406, Dst Port: 8472                                               // UDP Port
|Virtual eXtensible Local Area Network                                                                 // VxLAN Header
|Ethernet II, Src: f2:bb:d8:c8:db:bb (f2:bb:d8:c8:db:bb), Dst: 2e:23:03:33:2f:6d (2e:23:03:33:2f:6d)   // Inner_S_MAC   and    Inner_D_MAC 
|Internet Protocol Version 4, Src: 10.244.0.9, Dst: 10.244.2.10                                        // Inner_S_IP    and    Inner_D_IP
|Internet Control Message Protocol 
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
|From the above dragiam, we can see, we need many items for encap the vxlan packet.
|About the local side, we can get the enough info, but the remote,it's not, how to get the remote info for encap?
|We need to know which node witht the MAC_$(10.244.2.0/32), because we shoud forward the packet to the node.

|The condition is: we get the mac, but do not know the host. which object have this behiavor? Yes, the Switch.As we all know that the Switch use the mac table(FDB table tp forward the packet to the dest host. So, what's FDB(MAC table? If we compare with Swith mode, it's a simple object to understand!!!))

|OK, we can quary the FDB to get the remote info:
|$ bridge fdb show | grep 33:2f:6d  // this mac is the pod3's mac address.
|2e:23:03:33:2f:6d dev flannel.1 dst 192.168.2.73 self permanent
|
|From this item, we can see the "host" is 192.168.2.73.  Yes, we get the full info to encap the vxlan packet.
|
|
|---------------------------------------------------------------------------------------------------------------
|Step3: When encaped with VxLAN mode: the SIP will be replaed with the host's IP.
|---------------------------------------------------------------------------------------------------------------
|So  if we want to forward the packet, we also need quary the routing table:
|$ route -n 
|Kernel IP routing table
|Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
|0.0.0.0         192.168.2.1     0.0.0.0         UG    100    0        0 ens160
|10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0
|10.244.1.0      10.244.1.0      255.255.255.0   UG    0      0        0 flannel.1
|10.244.2.0      10.244.2.0      255.255.255.0   UG    0      0        0 flannel.1
|169.254.0.0     0.0.0.0         255.255.0.0     U     1000   0        0 ens160
|172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0
|192.168.2.0     0.0.0.0         255.255.255.0   U     100    0        0 ens160  // it will match this table. it's a normal case!!!
|---------------------------------------------------------------------------------------------------------------
|
|
↓↓↓
Insert into this part:
If we capture at the flannel.1 interface directly, what can be found?
$ ping 10.244.2.0 -I 10.244.0.0
PING 10.244.2.0 (10.244.2.0) from 10.244.0.0 : 56(84) bytes of data.
64 bytes from 10.244.2.0: icmp_seq=1 ttl=64 time=0.530 ms
^C
--- 10.244.2.0 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.530/0.530/0.530/0.000 ms
root@bpf1:~# 
We can use wireshark to de-encap the packet:

Frame 23: 148 bytes on wire (1184 bits), 148 bytes captured (1184 bits)
Ethernet II, Src: VMware_67:92:63 (00:0c:29:67:92:63), Dst: VMware_dd:24:3a (00:0c:29:dd:24:3a)
Internet Protocol Version 4, Src: 192.168.2.71, Dst: 192.168.2.73
User Datagram Protocol, Src Port: 56406, Dst Port: 8472
Virtual eXtensible Local Area Network
Ethernet II, Src: f2:bb:d8:c8:db:bb (f2:bb:d8:c8:db:bb), Dst: 2e:23:03:33:2f:6d (2e:23:03:33:2f:6d)
Internet Protocol Version 4, Src: 10.244.0.0, Dst: 10.244.2.0
Internet Control Message Protocol


So it's so simple:
can we make a demo for VxLAN manualy? Of course!!!
  1.1.1.1/24       1.1.1.2/24
|-----------|    |-----------|
|  vxlan0   |    |   vxlan1  |
|    |      |    |     |     |
|  ens160   |    |   ens160  |
|----|------|    |-----|-----|  
     |-----------------|
192.168.2.71      192.168.2.73


$ ip l a vxlan0 type vxlan id 5 dstport 4789 remote 192.168.2.73 local 192.168.2.71 dev ens160
$ ip a a 1.1.1.1/24 vxlan0 
$ ip l s vxlan0 up

$ ip l a vxlan1 type vxlan id 5 dstport 4789 remote 192.168.2.71 local 192.168.2.73 dev ens160
$ ip a a 1.1.1.2/24 vxlan1 
$ ip l s vxlan1 up

