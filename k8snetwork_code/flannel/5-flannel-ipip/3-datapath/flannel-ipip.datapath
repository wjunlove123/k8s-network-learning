---------------------------------------------------------------------------------------------------------------
Flannel ipip ENV:
$ kubectl get node -owide | grep -E "bpf1|bpf3"
bpf1   Ready    control-plane,master   3d20h   v1.23.4   192.168.2.71   <none>        Ubuntu 20.04.5 LTS   5.15.0-52-generic   docker://20.10.21
bpf3   Ready    <none>                 3d20h   v1.23.4   192.168.2.73   <none>        Ubuntu 20.04.5 LTS   5.15.0-52-generic   docker://20.10.21

$ k get pods -owide | grep -E "bpf1|bpf3"
flannel-ipip-62lgn   1/1     Running   0          15h   10.244.2.13   bpf3   <none>           <none>
flannel-ipip-nvk2t   1/1     Running   0          15h   10.244.0.13   bpf1   <none>           <none>
 
$ k exec -it flannel-ipip-nvk2t -- ping -c 1 10.244.2.13

---------------------------------------------------------------------------------------------------------------
Step1: Pod_$(BPF1) ---> BPF1_Node:
---------------------------------------------------------------------------------------------------------------
When do the ping at the pod flannel-ipip-nvk2t, it will triger the routing quary logical:
$ kubectl exec -it flannel-ipip-nvk2t -- route -n 
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.244.0.1      0.0.0.0         UG    0      0        0 eth0
10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 eth0
10.244.0.0      10.244.0.1      255.255.0.0     UG    0      0        0 eth0  // it will match this table.and the next-hop is the 10.244.0.1 which at the ROOT NS.
So we need get the MAC_$(10.244.0.1).It's a basical routing quary.
We can capture this with tcpdump!
bash-5.1# arp -n 
bash-5.1# // it's empty now.

If we do the ping to 10.244.2.13, (In order to get the MAC_$(10.244.0.1,it need arp protcol))we can see:
$ arp -n 
Address                  HWtype  HWaddress           Flags Mask            Iface
10.244.0.1               ether   f6:c8:0b:ba:1b:0b   C                     eth0
We can encap the packet and send to the ROOT NS. The next-step will use the ROOT NS's logical to deal the packet.


---------------------------------------------------------------------------------------------------------------
Step2: ROOT NS handle the packet: S_IP: 10.244.0.13 D_IP: 10.244.2.13
---------------------------------------------------------------------------------------------------------------
When the ROOT NS recv the packet. how to deal? Rougint/FDB/netfilter?. Yes, we are always consider the Routing fitstly.
$ route -n 
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.2.1     0.0.0.0         UG    100    0        0 ens160
10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0
10.244.1.0      192.168.2.72    255.255.255.0   UG    0      0        0 flannel.ipip
10.244.2.0      192.168.2.73    255.255.255.0   UG    0      0        0 flannel.ipip //will match this table.the out-interface is flannel.ipip, next-hop is 192.168.2.73
169.254.0.0     0.0.0.0         255.255.0.0     U     1000   0        0 ens160
172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0
192.168.2.0     0.0.0.0         255.255.255.0   U     100    0        0 ens160

We can revirew the vxlan mode, we need replace the src_mac and the dst_mac based on the routing table. But:
This is the ipip case. As we all know that: The ipip will hit the mac_address.so layer.
We can capture to veify:
Capture at the flannel.ipip(BPF1)
$ tcpdump -pne -i flannel.ipip
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on flannel.ipip, link-type RAW (Raw IP), capture size 262144 bytes               // RAW IP patcket.
16:07:01.233219 ip: 10.244.0.13 > 10.244.2.13: ICMP echo request, id 27, seq 0, length 64  // the ICMP request: without the MAC Address.
16:07:01.267447 ip: 10.244.2.13 > 10.244.0.13: ICMP echo reply, id 27, seq 0, length 64    // the ICMP reply: without the MAC Address.

So, for this hook, we do not consider the L2 info. 
We need also care about the flannel.ipip interface which is a ipip device:$ ip -d link show flannel.ipip
$ ip -d link show flannel.ipip
11: flannel.ipip@NONE: <NOARP,UP,LOWER_UP> mtu 1480 qdisc noqueue state UNKNOWN mode DEFAULT group default 
    link/ipip 192.168.2.71 brd 0.0.0.0 promiscuity 0 minmtu 0 maxmtu 0 
    ipip{THIS ONE} any remote any local 192.168.2.71 ttl inherit nopmtudisc addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 
// So, we need encap the patck with ipip's logical:
how the ipip work? do we need a demo? we can learn the Flannel's logical, and make a demo for ourself.
In order to understand the IPIP's logical:
we need capture at the ens160:
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
Frame 26: 118 bytes on wire (944 bits), 118 bytes captured (944 bits)
Ethernet II, Src: VMware_67:92:63 (00:0c:29:67:92:63), Dst: VMware_dd:24:3a (00:0c:29:dd:24:3a)   // Outer_S_MAC and  Outer_D_MAC
Internet Protocol Version 4, Src: 192.168.2.71, Dst: 192.168.2.73                                 // Outer_S_IP  and  Outer_D_IP
Internet Protocol Version 4, Src: 10.244.0.13, Dst: 10.244.2.13                                   // Inner_S_IP  and  Inner_D_IP
Internet Control Message Protocol                                                             
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| 
In order to encap the packet IPIP's logical, we can need know the Dst_Pod in which node. 
How to get this  info?  Routing/FDB/Netfilter?  Yes, we have got the info from the Routing Table:
$ route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.2.1     0.0.0.0         UG    100    0        0 ens160
10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0
10.244.1.0      192.168.2.72    255.255.255.0   UG    0      0        0 flannel.ipip
10.244.2.0      192.168.2.73    255.255.255.0   UG    0      0        0 flannel.ipip // match this one.
169.254.0.0     0.0.0.0         255.255.0.0     U     1000   0        0 ens160
172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0
192.168.2.0     0.0.0.0         255.255.255.0   U     100    0        0 ens160
One Question here:
From the VXLAN mode, we can get the Routing Quary is 1st, and the encap is sencond. Because, the Rouging Quary will tell the system the DST_node's ip address.
So, About the VxLAN and IPIP mode, they have the same logical!!!

---------------------------------------------------------------------------------------------------------------
Step3: Demo the IPIP mode
---------------------------------------------------------------------------------------------------------------
--------------       --------------
|            |       |            |
| 1.1.1.1/24 |       | 1.1.2.1/24 |
|   ipip0    |       |   ipip0    |
|     |      |       |     |      |
|     |      |       |     |      |
------|-------       ------|-------
   ens160                ens160
      |                    |
      ----------------------
192.168.2.71          192.168.2.73
$ BPF1 Node:
ip l a name ipip0 type ipip local 192.168.2.71 remote 192.168.2.73
ip l s ipip0 up
ip a a 1.1.1.1/24 dev ipip0
ip r a 1.1.2.0/24 dev ipip0

$ BPF3 Node:
ip l a name ipip0 type ipip local 192.168.2.73 remote 192.168.2.71
ip l s ipip0 up
ip a a 1.1.2.1/24 dev ipip0 
ip r a 1.1.1.0/24 dev ipip0

wireshark ./ipip0-ens160.cap

