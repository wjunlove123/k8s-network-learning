# This for anlysics the flannel udp mode's datapath:

$ k get nodes -owide 
NAME   STATUS   ROLES                  AGE     VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
bpf1   Ready    control-plane,master   2d17h   v1.23.4   192.168.2.71   <none>        Ubuntu 20.04.5 LTS   5.15.0-52-generic   docker://20.10.21
bpf3   Ready    <none>                 2d17h   v1.23.4   192.168.2.73   <none>        Ubuntu 20.04.5 LTS   5.15.0-52-generic   docker://20.10.21
$ k get pods -owide 
NAME                READY   STATUS    RESTARTS   AGE     IP           NODE   NOMINATED NODE   READINESS GATES
flannel-udp-cxhdr   1/1     Running   0          5m57s   10.244.2.9   bpf3   <none>           <none>
flannel-udp-lsbgg   1/1     Running   0          5m57s   10.244.0.8   bpf1   <none>           <none>
root@bpf1:~/wspace/wcni/flannel/1-flannel-udp# 



1.pod($node_bpf1) ping pod($node_bpf3)
$ k exec -it flannel-udp-lsbgg -- ping -c 1 10.244.2.9
PING 10.244.2.9 (10.244.2.9): 56 data bytes
64 bytes from 10.244.2.9: seq=0 ttl=60 time=0.901 ms

--- 10.244.2.9 ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max = 0.901/0.901/0.901 ms
root@bpf1:~/wspace/wcni/flannel/1-flannel-udp# 

2.Pod($node_bpf1) flannel-udp-lsbgg:
$ k exec -it flannel-udp-lsbgg  -- route -n 
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.244.0.1      0.0.0.0         UG    0      0        0 eth0
10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 eth0
10.244.0.0      10.244.0.1      255.255.0.0     UG    0      0        0 eth0 # To the 10.244.2.9 will match this routing table and the next-hop is 10.244.0.1

$ ifconfig cni0
cni0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1472
        inet 10.244.0.1  netmask 255.255.255.0  broadcast 10.244.0.255
        inet6 fe80::f4c8:bff:feba:1b0b  prefixlen 64  scopeid 0x20<link>
        ether f6:c8:0b:ba:1b:0b  txqueuelen 1000  (Ethernet)
        RX packets 838  bytes 96695 (96.6 KB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 1257  bytes 118448 (118.4 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

2.The 10.244.0.1 is the bpf1 node's cni0 ip address, so the packet send to the ROOT NS.
  If we get the packet at the ROOT NS, the RX/TX will take from the ROOT NS.

3.ROOT NS(do the routing quary): 
$ route -n 
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.2.1     0.0.0.0         UG    20100  0        0 ens160
10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0
10.244.0.0      0.0.0.0         255.255.0.0     U     0      0        0 flannel0 # when quary the ROOT NS routing table,will match this. flannel0 is the interface.
169.254.0.0     0.0.0.0         255.255.0.0     U     1000   0        0 ens160
172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0
192.168.2.0     0.0.0.0         255.255.255.0   U     100    0        0 ens160

4.From the ROOT NS's logiacl, we can see the patket will send to flannl0 interface.where is the flannel0?
$ ifconfig flannel0 (from the below info, we can not get the mac address!!!) which type with this feature? Myabe TUN.
flannel0: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST>  mtu 1472
        inet 10.244.0.0  netmask 255.255.255.255  destination 10.244.0.0
        inet6 fe80::de7e:63e8:6853:905b  prefixlen 64  scopeid 0x20<link>
        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)
        RX packets 1771  bytes 186084 (186.0 KB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 2403  bytes 154864 (154.8 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

$ ip tuntap list flannel0
flannel0: tun // this is a tun device.

FAQ: what is the tun device?
+--------------------------------------------+
| Processes                                  |
+--------------------------------------------+
  ↕ Socket interface
+---------------------------------------------+
| Network Stack (kernel)                      |<--+
+---------------------------------------------+   |
  ↕ Eth. frame     ↕ Eth. frame    ↕ IP packet    |
+--------------+ +-------------+ +------------+   |
| enp2s0       | | tap0        | | tun0       |   |
+--------------+ +-------------+ +------------+   |
  ↑ Eth. frame     ↕ Eth. frame¹   ↕ IP packet¹   |
+--------------+ +-------------+ +------------+   |
| Driver       | | Process     | | Process    |   |
+--------------+ +-------------+ +------------+   |
  ↕ Eth. frame²    ↑               ↑              |
+--------------+   +---------------+--------------+
| Eth. Adapter  |      (encapsulated packets)
+--------------+         |              |
  ↕ Eth. frame           |              | 
+--------------+         |              |
| Eth. Network |         |              |
+--------------+         |              |
       |                 |              |
Physical netdev     Ethernet VPN      IP VPN

¹: via /dev/net/tun
²: over PCI Express for example

From the above diagram
firefox ../reference/TUN_TAP\ interface\ \(on\ Linux\)\ -\ _dev_posts_\ \(11_6_2022\ 4_32_46\ PM\).html

About the TAP/TUN device,it can not send the packet to the outside directlly. so it need based on routing or enscap. 
TUN handle the L3 packet.
TAP handle the L2 packet.

5. re-enscap:
FAQ:5.How to understand this logical?
When the flannel0 interface recv the packet, it will send to the user-space. the flanneld process will handle this packet,
About the flanneld, it will prase the packet and re-send to the kernel side(which like other normal process). 
$ netstat -lnp | grep flanneld
udp        0      0 192.168.2.71:8285       0.0.0.0:*                           17178/flanneld  //this is a user-space processs.
The flanneld will treat the origin-packet as a normal data-payload. and re-send to the kernel-side. 
We can see from the packet:
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
Frame 119: 126 bytes on wire (1008 bits), 126 bytes captured (1008 bits)
Ethernet II, Src: VMware_67:92:63 (00:0c:29:67:92:63), Dst: VMware_1f:10:5f (00:0c:29:1f:10:5f)
Internet Protocol Version 4, Src: 192.168.2.71, Dst: 192.168.2.72
User Datagram Protocol, Src Port: 8285, Dst Port: 8285 --------------------------------------- // below is the origin-packet, and above is the normal header.
Internet Protocol Version 4, Src: 10.244.0.7, Dst: 10.244.1.8
Internet Control Message Protocol
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
All the overlay's logical is hide the origin-packet due to the outside network without the routing table.
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

