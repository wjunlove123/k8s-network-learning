DRR: https://docs.cilium.io/en/v1.12/gettingstarted/kubeproxy-free/#direct-server-return-dsr
Direct Server Return (DSR)

env:
$ kubectl get svc -o wide | grep dsr 
dsr          NodePort    10.101.168.25   <none>        80:30871/TCP     80m   app=dsr
$ kubectl get pods -owide | grep bpf2
dsr-68876f9dcc-7ssbj   1/1     Running   0          80m   10.244.1.209   bpf2   <none>           <none>
$ kubectl get nodes -owide | grep -E "bpf1|bpf2"
bpf1   Ready    control-plane,master   17d   v1.23.4   192.168.2.71   <none>        Ubuntu 20.04.5 LTS   5.15.0-52-generic   docker://20.10.21
bpf2   Ready    <none>                 17d   v1.23.4   192.168.2.72   <none>        Ubuntu 20.04.5 LTS   5.15.0-52-generic   docker://20.10.21



topo:
(1):192.168.2.10:12345--->192.168.2.71:30871
 ↓
 |               (2):192.168.2.10:12345--->10.244.1.209:80
 |                                  ↓
 |                                  ↓
 |   ----------------------------   ↓    ----------------------------
 |   |     192.168.2.71/24      |   ↓    |     192.168.2.72/24      |
 |   |                          |   ↓    |     10.244.1.209/32      |
 |   |                          |   ↓    |                          |
 |   |                          |   ↓    |                          |
 |   |           | |            |   ↓    |          | |             |
 |   ------------|-|-------------   ↓    -----------|-|--------------
 |               | |                ↓               | |
 |      ↑---→----↑ ↓               (2)              ↑ ↓
 |      ↑          ------→--------------------------↑ ↓
 | (1)  ↑  ←----------------←-------------------------↓
 |→→→→→ ↑  ↓                  (3)                                   
 -------|--|------| (3):192.168.2.71:30871--->192.168.2.10:12345
 |    Ethernet    |
 |     win10      |
 ------------------
  192.168.2.10/24

Usually, the Service based on NAT to achive. The details can found: firefox ../4-reference/'Cilium 1.7_ Hubble UI, Cluster-wide Network Policies, eBPF-based Direct Server Return, TLS visibility, New eBPF Go Library, ... (11_21_2022 10_24_36 PM).html'

$ For this mode, we need review the TCP three-ways handshake. We need find the SYN,SYN+ACK,ACK
  Need complete the TCP threee-ways handshake Loop.

BPF192.168.2.71:
1st: 192.168.2.10:12345--->192.168.2.71:30871 {SYN}
2st: 192.168.2.10:12345--->10.244.1.209:80    {SYN}

BPF192.168.2.72:
3st: 192.168.2.71:30871--->192.168.2.10:12345 {SYN+ACK}

Win10:192.168.2.10
4st: 192.168.2.10:12345--->192.168.2.71:30871 {ACK}

5st: HTTP GET
6st: HTTP 200OK

3992	2022-11-21 22:39:13.572938	192.168.2.10	192.168.2.71	HTTP	136	b0:22:7a:db:86:d2	00:0c:29:67:92:63	GET / HTTP/1.1 
3995	2022-11-21 22:39:13.574105	192.168.2.71	192.168.2.10	HTTP	114	00:0c:29:1f:10:5f	b0:22:7a:db:86:d2	HTTP/1.1 200 OK  (text/html)


$ Step1: 192.168.2.10:12345--->192.168.2.71:30871 it's a normal step. This is a Clinet trigger a TCP SYN to 192.168.2.71

$ Step2: 192.168.2.10:12345--->10.244.1.209:80 // For this step, it's different btw with the SANT mode, We can see that the Src_IP is the Oigin_SRC_IP:192.168.2.10
Why? How? 
// Can we achieve this? I think, we can! For the 192.168.2.71 host, when recv the SYN from the Client: 192.168.2.10. we can get the ip address:192.168.2.10, so i can encap the packet with SRC_IP:192.168.2.10. I think it's have the possibility. We can regard the interface as the "pipeline", and the New Packet is:
SRC_IP: 192.168.2.10 DST_IP: 1-.255.1.209. So, If the HOST 192.168.2.71 want to send out this packet, how to do? Quary the Rouging table, or FDB or Netfilter.
We always prefer the Routing table, This is Native-Routing Mode, So it's a simple case. Step2 done

$ Step3: If the 192.168.2.72 recv this packet, How to do? . From the capture , we can see the Client recv the ACK, the SRC_IP is 192.168.2.71 and the Dst_IP is 192.168.2.10. For the 192.168.2.72, how to get this origin_ip(192.168.2.2.71)? That's is the key point for this DSR case.
Yes, this is due to the IP's extend header which called the ip-oprion.
Internet Protocol Version 4, Src: 192.168.2.10, Dst: 10.244.1.209
    0100 .... = Version: 4
    .... 0111 = Header Length: 28 bytes (7)
    Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)
    Total Length: 60
    Identification: 0x129a (4762)
    Flags: 0x40, Don't fragment
    ...0 0000 0000 0000 = Fragment Offset: 0
    Time to Live: 128
    Protocol: TCP (6)
    Header Checksum: 0xf566 [validation disabled]
    [Header checksum status: Unverified]
    Source Address: 192.168.2.10
    Destination Address: 10.244.1.209
    Options: (8 bytes)
        Unknown (0x9a) (8 bytes) // This is the hader.
                       \
0000   00 0c 29 1f 10 5f 00 0c 29 67 92 63 08 00 47 00   ..).._..)g.c..G.
0010   00 3c 12 9a 40 00 80 06 f5 66 c0 a8 02 0a 0a f4   .<..@....f......
0020   01 d1 {9a 08 97 78 47 02 a8 c0} 30 24 00 50 5e ad   .....xG...0$.P^.//47 02 a8 c0==192.168.2.71//details can be found at wireshark ./dsr_71_ens160.cap[Line: 722]
0030   08 b2 00 00 00 00 80 02 fa f0 0c d5 00 00 02 04   ................
0040   05 b4 01 03 03 08 01 01 04 02                     ..........

Okay, this is the 192.168.2.71, The 192.168.2.72 through this info to get the 192.168.2.71,So when send the ACK the Client, it's encap with SRC_IP:192.168.2.71.
We can also consider another case: if the 192.168.2.72 send with 192.168.2.72, The client will drop/accespt/forward? Yes, Drop. the TCP Three-way handshake will fail.
For more info about the IP Option.Please refer the Packet fromat v1.0.chm


